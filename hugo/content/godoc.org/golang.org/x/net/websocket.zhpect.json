{
    "_defaultOther": ["zh_G"],
    "origin": {
        "q4y3X6f": "package websocket",
        "Z66yLnd": "Package websocket implements a client and server for the WebSocket protocol as specified in <a href=\"http://tools.ietf.org/html/rfc6455\">RFC 6455</a> .",
        "SQXYkaK": "This package currently lacks some features found in an alternative and more actively maintained WebSocket package:",
        "TpgJEXu": "Index",
        "2XKdjUc": "Examples",
        "dTq3mhn": "Package Files",
        "GtZtUKL": "Constants",
        "KSpH9KU": "Variables",
        "8fWwFK8": "ErrFrameTooLarge is returned by Codec 's Receive method if payload size exceeds limit set by Conn.MaxPayloadBytes",
        "cpzvGz4": "JSON is a codec to send/receive JSON data in a frame from a WebSocket connection.",
        "7EDkdZL": "Trivial usage:",
        "7Y6qDrV": "Message is a codec to send/receive text/binary data in a frame on WebSocket connection. To send/receive text frame, use string type. To send/receive binary frame, use []byte type.",
        "BdQ94n2": "Origin parses the Origin header in req. If the Origin header is not set, it returns nil and nil.",
        "NT8Ekr2": "Addr is an implementation of net.Addr for WebSocket.",
        "3UVdv6z": "Network returns the network type for a WebSocket, \"websocket \".",
        "He6EYSe": "Codec represents a symmetric pair of functions that implement a codec.",
        "g9Asxj9": "Receive receives single frame from ws, unmarshaled by cd.Unmarshal and stores in v. The whole frame payload is read to an in-memory buffer; max size of payload is defined by ws.MaxPayloadBytes. If frame payload size exceeds limit, ErrFrameTooLarge is returned; in this case frame is not read off wire completely. The next call to Receive would read and discard leftover data of previous oversized frame before processing next frame.",
        "fRetayG": "Send sends v marshaled by cd.Marshal as single frame to ws.",
        "ZVagFBA": "Config is a WebSocket configuration",
        "9jwWYNf": "NewConfig creates a new WebSocket config for client connection.",
        "CcnRdKD": "Conn represents a WebSocket connection.",
        "nWbP6Br": "Multiple goroutines may invoke methods on a Conn simultaneously.",
        "RBqkHRj": "Dial opens a new client connection to a WebSocket.",
        "DMqDPV9": "This example demonstrates a trivial client.",
        "kDm2X49": "Code:",
        "bgsRVCt": "DialConfig opens a new client connection to a WebSocket with a config.",
        "xp5Z3qK": "NewClient creates a new WebSocket client connection over rwc.",
        "eKxHreC": "Close implements the io.Closer interface.",
        "947uDHR": "Config returns the WebSocket config.",
        "SX8RDTk": "IsClientConn reports whether ws is a client-side connection.",
        "rBmttZM": "IsServerConn reports whether ws is a server-side connection.",
        "bXVeYQB": "LocalAddr returns the WebSocket Origin for the connection for client, or the WebSocket location for server.",
        "tYmsJUL": "Read implements the io.Reader interface: it reads data of a frame from the WebSocket connection. if msg is not large enough for the frame data, it fills the msg and next Read will read the rest of the frame data. it reads Text frame or Binary frame.",
        "PprUBXU": "RemoteAddr returns the WebSocket location for the connection for client, or the Websocket Origin for server.",
        "VqdNfzL": "Request returns the http request upgraded to the WebSocket. It is nil for client side.",
        "6wmaVPs": "SetDeadline sets the connection 's network read &amp;write deadlines.",
        "UMt2MkA": "SetReadDeadline sets the connection 's network read deadline.",
        "druzGZC": "SetWriteDeadline sets the connection 's network write deadline.",
        "str9xgJ": "Write implements the io.Writer interface: it writes data as a frame to the WebSocket connection.",
        "WzXfRvq": "DialError is an error that occurs while dialling a websocket server.",
        "zth6LHG": "Handler is a simple interface to a WebSocket browser client. It checks if Origin header is valid URL by default. You might want to verify websocket.Conn.Config().Origin in the func. If you use Server instead of Handler, you could call websocket.Origin and check the origin in your Handshake func. So, if you want to accept non-browser clients, which do not send an Origin header, set a Server.Handshake that does not check the origin.",
        "Uw4uG7c": "This example demonstrates a trivial echo server.",
        "yMLx2rH": "ServeHTTP implements the http.Handler interface for a WebSocket",
        "mgrk9sU": "ProtocolError represents WebSocket protocol errors.",
        "wd236B8": "Server represents a server of a WebSocket.",
        "MPSksah": "ServeHTTP implements the http.Handler interface for a WebSocket"
    },
    "zh_G": {
        "q4y3X6f": "包websocket",
        "Z66yLnd": "包websocket實現了WebSocket協議的客戶端和服務器，如 <a href=\"http://tools.ietf.org/html/rfc6455\">RFC 6455</a> 中所述。",
        "SQXYkaK": "此軟件包目前缺少替代且更積極維護的WebSocket軟件包中的一些功能：",
        "TpgJEXu": "指數",
        "2XKdjUc": "例子",
        "dTq3mhn": "包文件",
        "GtZtUKL": "常量",
        "KSpH9KU": "變量",
        "8fWwFK8": "如果有效負載大小超過Conn.MaxPayloadBytes設置的限制，則Codec的Receive方法返回ErrFrameTooLarge",
        "cpzvGz4": "JSON是一個編解碼器，用於從WebSocket連接發送/接收幀中的JSON數據。",
        "7EDkdZL": "瑣碎的用法：",
        "7Y6qDrV": "消息是在WebSocket連接上的幀中發送/接收文本/二進制數據的編解碼器。要發送/接收文本框架，請使用字符串類型。要發送/接收二進制幀，請使用[]字節類型。",
        "BdQ94n2": "Origin在req中解析Origin頭。如果未設置Origin標頭，則返回nil和nil。",
        "NT8Ekr2": "Addr是WebSocket的net.Addr的實現。",
        "3UVdv6z": "網絡返回WebSocket的網絡類型“websocket”。",
        "He6EYSe": "編解碼器代表實現編解碼器的對稱函數對。",
        "g9Asxj9": "接收從ws接收單幀，由cd.Unmarshal解組並存儲在v中。整個幀有效負載被讀取到內存緩衝區;有效負載的最大大小由ws.MaxPayloadBytes定義。如果幀有效負載大小超過限制，則返回ErrFrameTooLarge;在這種情況下，框架不會完全從線上讀取。下一次調用Receive將在處理下一幀之前讀取並丟棄先前超大幀的剩餘數據。",
        "fRetayG": "將cd.Marshal發送的v發送作為單幀發送到ws。",
        "ZVagFBA": "Config是WebSocket配置",
        "9jwWYNf": "NewConfig為客戶端連接創建新的WebSocket配置。",
        "CcnRdKD": "Conn表示WebSocket連接。",
        "nWbP6Br": "多個goroutine可以同時調用Conn上的方法。",
        "RBqkHRj": "撥號打開與WebSocket的新客戶端連接。",
        "DMqDPV9": "此示例演示了一個簡單的客戶端。",
        "kDm2X49": "碼：",
        "bgsRVCt": "DialConfig使用配置打開與WebSocket的新客戶端連接。",
        "xp5Z3qK": "NewClient通過rwc創建一個新的WebSocket客戶端連接。",
        "eKxHreC": "Close實現了io.Closer接口。",
        "947uDHR": "Config返回WebSocket配置。",
        "SX8RDTk": "IsClientConn報告ws是否是客戶端連接。",
        "rBmttZM": "IsServerConn報告ws是否是服務器端連接。",
        "bXVeYQB": "LocalAddr返回客戶端連接的WebSocket Origin，或服務器的WebSocket位置。",
        "tYmsJUL": "Read實現了io.Reader接口：它從WebSocket連接讀取幀的數據。如果msg對於幀數據不夠大，則填充msg，然後讀取將讀取剩餘的幀數據。它讀取文本框架或二進制框架。",
        "PprUBXU": "RemoteAddr返回客戶端連接的WebSocket位置，或服務器的Websocket Origin。",
        "VqdNfzL": "請求返回升級到WebSocket的http請求。客戶端是零。",
        "6wmaVPs": "SetDeadline設置連接的網絡讀取和寫入期限。",
        "UMt2MkA": "SetReadDeadline設置連接的網絡讀取截止日期。",
        "druzGZC": "SetWriteDeadline設置連接的網絡寫入期限。",
        "str9xgJ": "Write實現了io.Writer接口：它將數據作為幀寫入WebSocket連接。",
        "WzXfRvq": "DialError是撥打websocket服務器時發生的錯誤。",
        "zth6LHG": "Handler是WebSocket瀏覽器客戶端的簡單接口。它默認檢查Origin標頭是否為有效URL。您可能想驗證websocket.Conn.Config（）。來自func。如果您使用Server而不是Handler，您可以調用websocket.Origin並檢查Handshake func中的原點。因此，如果要接受不發送Origin標頭的非瀏覽器客戶端，請設置不檢查原點的Server.Handshake。",
        "Uw4uG7c": "此示例演示了一個簡單的echo服務器。",
        "yMLx2rH": "ServeHTTP實現WebSocket的http.Handler接口",
        "mgrk9sU": "ProtocolError表示WebSocket協議錯誤。",
        "wd236B8": "Server表示WebSocket的服務器。",
        "MPSksah": "ServeHTTP實現WebSocket的http.Handler接口"
    }
}
