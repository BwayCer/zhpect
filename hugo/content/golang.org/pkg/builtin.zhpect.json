{
    "_defaultOther": ["zh_G", "zh_TW"],
    "zh_G": {
        "u9EUTvJ": "概觀",
        "rJkH84t": "指數",
        "C8KzFNF": "Package builtin提供了Go的預先聲明的標識符的文檔。這裡記錄的項目實際上並不是內置的包，但是這裡的描述允許godoc提供語言特殊標識符的文檔。",
        "6g53eMw": "常量",
        "ZBRfTmN": "變量",
        "APYhWuK": "包文件",
        "hs7eeGc": "true和false是兩個無類型的布爾值。",
        "amvmjR6": "// 沒有類型的 bool。",
        "GxMAfxZ": "iota 是一個預先聲明的標識符，表示（通常帶括號的）const聲明中當前const規範的無類型整數序號。它是零索引的。",
        "K8dXqe3": "// 沒有類型的 int。",
        "JrJqLm3": "nil是一個預先聲明的標識符，表示指針，通道，func，接口，映射或切片類型的零值。",
        "tu4fwqb": "// 類型必須是 pointer, channel, func, interface, map, slice 類型",
        "dYXhLAB": "附加內置函數將元素附加到切片的末尾。如果它具有足夠的容量，則會復制目標以容納新元素。如果沒有，將分配新的底層數組。 Append返回更新的切片。因此有必要存儲append的結果，通常在保存切片本身的變量中：",
        "FB6NbmD": "作為一種特殊情況，將字符串附加到字節切片是合法的，如下所示：",
        "DdHhStf": "cap內置函數根據其類型返回v的容量：",
        "LM9RZen": "array： v 中的元素數（與 len(v) 相同）。\narray 的指針： *v中的元素數（與 len(v) 相同）。\nslice： slice 重複時可達到的最大長度；\n如果 v 為零，則 cap(v) 為零。\nchannel： channel 緩衝容量，以元素為單位；\n如果 v 為零，則 cap(v) 為零。",
        "JDHZMm6": "對於某些參數，例如簡單的數組表達式，結果可以是常量。有關詳細信息，請參閱Go語言規範的“長度和容量”部分。",
        "XHEpUsW": "close內置函數關閉一個通道，該通道必須是雙向的或僅發送的。它應該只由發送方執行，而不是由接收方執行，並且在收到最後發送的值之後具有關閉通道的效果。在從閉合通道c接收到最後一個值之後，來自c的任何接收都將成功而不會阻塞，返回通道元素的零值。表格",
        "Dr2acQm": "對於封閉頻道，也會將ok設置為false。",
        "VvqkzVh": "複雜的內置函數從兩個浮點值構造複雜值。實部和虛部必須具有相同的大小，float32或float64（或可分配給它們），返回值將是相應的複雜類型（complex32為complex64，float64為complex128）。",
        "fz5FJwc": "複製內置函數將元素從源切片複製到目標切片。 （作為一種特殊情況，它還會將字符串中的字節複製到一個字節片段。）源和目標可能重疊。 Copy返回複製的元素數，這將是 len(src) 和 len(dst) 的最小值。",
        "z9XtuSx": "delete內置函數從地圖中刪除具有指定鍵（m [key]）的元素。如果m為nil或者沒有這樣的元素，則delete是no-op。",
        "fw6Txky": "imag內置函數返回複數c的虛部。返回值將是對應於c類型的浮點類型。",
        "gUYsxsz": "len 內置函數根據其類型返回v的長度：",
        "pAcAywm": "array： v 中元素的數量。\narray 的指針： *v 中的元素數量（即使 v 為 nil）。\nslice 或 map：v中元素的數量;\n如果v為零，則 len(v) 為零。\n字符串：v 中的字節數。\nchannel：通道緩衝區中排隊（未讀）的元素數;\n如果v為零，則 len(v) 為零。",
        "VNUAuYR": "對於某些參數，例如字符串文字或簡單數組表達式，結果可以是常量。有關詳細信息，請參閱Go語言規範的“長度和容量”部分。",
        "RTq9mLf": "make內置函數分配並初始化slice，map或chan（僅）類型的對象。像new一樣，第一個參數是一個類型，而不是一個值。與new不同，make的返回類型與其參數的類型相同，而不是指向它的指針。結果的規格取決於類型：",
        "BXhwAdj": "slice：大小指定長度。 slice 的容量等於其長度。 可以提供第二整數參數以指定不同的容量； 它必須不小於長度。\n例如： make([]int, 0, 10) 分配一個大小為 10 的基礎 array，並返回一個長度為 0 的 slice 和由此底層 array 支持的容量 10。\nmap：為空 map 分配足夠的空間以容納指定數量的元素。可以省略大小，在這種情況下分配小的起始大小。\nchannel：使用指定的緩衝區容量初始化通道的緩衝區。如果為零，或者省略了大小，則 channel 是無緩衝的。",
        "YJ87DPC": "新的內置函數分配內存。第一個參數是類型，而不是值，返回的值是指向該類型新分配的零值的指針。",
        "YxQNgfp": "恐慌內置函數會停止當前goroutine的正常執行。當功能F調用恐慌時，F的正常執行立即停止。執行被F推遲的任何函數都以通常的方式運行，然後F返回其調用者。對於調用者G，F的調用則表現得像是對恐慌的調用，終止G的執行並運行任何延遲函數。這將一直持續到執行goroutine中的所有函數都以相反的順序停止。此時，程序終止並報告錯誤條件，包括恐慌參數的值。此終止序列稱為恐慌，可以通過內置函數recover進行控制。",
        "SSTAPYT": "print內置函數以特定於實現的方式格式化其參數，並將結果寫入標準錯誤。打印對於自舉和調試很有用;不保證保持語言。",
        "JZEfw44": "println內置函數以特定於實現的方式格式化其參數，並將結果寫入標準錯誤。始終在參數之間添加空格，並附加換行符。 Println對於引導和調試很有用;不保證保持語言。",
        "vASBkPE": "真正的內置函數返回複數c的實部。返回值將是對應於c類型的浮點類型。",
        "QyL9TTw": "恢復內置函數允許程序管理恐慌goroutine的行為。執行調用以在延遲函數內部進行恢復（但不是由它調用的任何函數）通過恢復正常執行來停止恐慌序列並檢索傳遞給恐慌調用的錯誤值。如果在延遲函數之外調用recover，它將不會停止恐慌序列。在這種情況下，或者當goroutine沒有恐慌，或者提供給panic的參數為nil時，recover返回nil。因此，恢復的返回值報告goroutine是否恐慌。",
        "7GHnqCC": "ComplexType僅用於文檔目的。它是複雜類型的替身：complex64或complex128。",
        "uuyHR3a": "FloatType僅用於文檔目的。它是float類型的替身：float32或float64。",
        "PDqzVCu": "IntegerType僅用於文檔目的。它是任何整數類型的替身：int，uint，int8等。",
        "ccDgwEp": "類型僅供參考。它是任何Go類型的替代，但對於任何給定的函數調用表示相同的類型。",
        "nv9k3xK": "Type1僅供參考。它是任何Go類型的替代，但對於任何給定的函數調用表示相同的類型。",
        "CCrdZyc": "bool是布爾值的集合，true和false。",
        "TDfQc27": "byte是uint8的別名，在所有方面都等同於uint8。按照慣例，它用於區分字節值和8位無符號整數值。",
        "KwYqX38": "complex128是具有float64實部和虛部的所有復數的集合。",
        "QRngARC": "complex64是具有float32實部和虛部的所有復數的集合。",
        "ULvCKEC": "錯誤內置接口類型是用於表示錯誤條件的傳統接口，其中nil值表示無錯誤。",
        "e4yRtCn": "float32是所有IEEE-754 32位浮點數的集合。",
        "EXUjAac": "float64是所有IEEE-754 64位浮點數的集合。",
        "x6dwUqD": "int是有符號整數類型，其大小至少為32位。但是，它是一種不同的類型，而不是int32的別名。",
        "MBYYfzN": "int16是所有帶符號的16位整數的集合。範圍：-32768到32767。",
        "TvryJvG": "int32是所有帶符號的32位整數的集合。範圍：-2147483648至2147483647。",
        "eLmC5ke": "int64是所有帶符號的64位整數的集合。範圍：-9223372036854775808至9223372036854775807。",
        "c8G6B3y": "int8是所有帶符號的8位整數的集合。範圍：-128到127。",
        "dqMADLz": "rune是int32的別名，在所有方面都等同於int32。按照慣例，它用於區分字符值和整數值。",
        "Uc49Mrw": "string是所有8位字節字符串的集合，通常但不一定代表UTF-8編碼的文本。字符串可以為空，但不能為零。字符串類型的值是不可變的。",
        "a4HnuJp": "uint是無符號整數類型，其大小至少為32位。然而，它是一種獨特的類型，而不是uint32的別名。",
        "bBTpWrM": "uint16是所有無符號16位整數的集合。範圍：0到65535。",
        "Gee4dny": "uint32是所有無符號32位整數的集合。範圍：0到4294967295。",
        "WZGCBAr": "uint64是所有無符號64位整數的集合。範圍：0到18446744073709551615。",
        "MWpa4yG": "uint8是所有無符號8位整數的集合。範圍：0到255。",
        "meruGmu": "uintptr是一個整數類型，足以容納任何指針的位模式。"
    },
    "zh_TW": {
        "RTq9mLf": "make 是分配並初始化 slice, map 或 chan (only) 類型的對象的內置函數。 像 new 一樣，第一個參數是類型而不是值。 與 new 不同，make 的回傳的類型與其參數的類型相同，而不是指針 (pointer)。 其格式的結果取決於類型：",
        "BXhwAdj": "Slice: size 指定長度。 slice 的容量等於其長度。 可以提供第二整數參數用以指定不同的容量； 其值必須不小於長度。\n例如： make([]int, 0, 10) 分配一個大小為 10 的底層 array，並返回一個長度為 0 的 slice 和由此底層 array 支持的容量 10。\nMap: 一個空 map 被分配足夠的空間以容納被指定的元素數量。 size 可以省略，在這種情況下會分配較小的起始大小。\nChannel: 使用指定的緩衝區容量初始化 channel 的緩衝區 (buffer)。 如果為 0，或者省略了 size，則 channel 是無緩衝的。",
        "YJ87DPC": "new 是分配內存的內置函數。 第一個參數是類型而不是值，並且其回傳值是新分配的該類型零值的指針 (pointer)。"
    }
}
